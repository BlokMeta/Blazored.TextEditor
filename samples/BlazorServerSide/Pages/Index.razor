@page "/"
@using BlazorServerSide.Models;
@using Blazored.TextEditor
@inject BlazorServerSide.Data.EmailDbContext _dbContext
@inject BlazorServerSide.Models.EmailDto _emailDto
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="column">
        <br />
        <button class="btn btn-success"
                @onclick="SaveToDB">
            Save To Database
        </button>
        <button class="btn btn-danger"
                @onclick="DeleteFromDb">
            Delete From Database
        </button><br /><br />

        <select @ref="myselect" class="form-control" style="width:800px"
                @onchange="selectedValue">

            <option value="" disabled selected hidden>Please Select Error Message Type!</option>
            @foreach (var item in comboBox)
            {
                <option value="@item.Id">@item.TemplateName</option>
            }
        </select><br />

        <BlazoredTextEditor @ref="@QuillHtml">
            <ToolbarContent>
                <select class="ql-header">
                    <option selected=""></option>
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option value="4"></option>
                    <option value="5"></option>
                </select>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>

            </ToolbarContent>
            <EditorContent>
            </EditorContent>
        </BlazoredTextEditor>
    </div>
    <div class="column" style="width:800px">
        <div>
            @((MarkupString)HeadAndFooter.ErrorMessageHeadandFooter.ErrorMessageHeader)
            <div class="quillcontent" style="padding-left:50px">
                @((MarkupString)QuillHTMLContent)
            </div>
            @((MarkupString)HeadAndFooter.ErrorMessageHeadandFooter.ErrorMessageFooter)
        </div>
    </div>
</div>

@code {
    BlazoredTextEditor QuillHtml;
    BlazoredTextEditor QuillNative;
    BlazoredTextEditor QuillReadOnly;
    List<EmailDto> comboBox = new List<EmailDto>() { };
    private ElementReference myselect;
    string QuillHTMLContent;
    string QuillContent;
    string QuillReadOnlyContent = 
        @"<span><b>Read Only</b> <u>Content</u></span>";
    bool mode = false;
    int templateId;

    public async void SaveToDB()
    {
        if (_emailDto.TemplateContext == null || _emailDto.TemplateContext == " ")
        {
            await JSRuntime.InvokeVoidAsync("alert", "Wrong entry! You can't save witouth choosing a Error Message type. Please then fill the text area.");
            _emailDto.TemplateContext = " ";
        }
        else
        {
            QuillHTMLContent = await this.QuillHtml.GetHTML();
            _emailDto = _dbContext.Templates.FirstOrDefault(x => x.Id == templateId);
            _emailDto.TemplateContext = QuillHTMLContent.ToString();
            await _dbContext.SaveChangesAsync();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        comboBox = _dbContext.Templates.ToList();
        await base.OnInitializedAsync();
    }

    public async void selectedValue(ChangeEventArgs args)
    {
        templateId = Convert.ToInt32(args.Value.ToString());
        _emailDto = _dbContext.Templates.FirstOrDefault(x => x.Id == Convert.ToInt32(args.Value.ToString()));
        string QuillContent = $@"{_emailDto.TemplateContext}";
        await this.QuillHtml.LoadHTMLContent(QuillContent);
        StateHasChanged();
    }

    public async void DeleteFromDb()
    {
        _dbContext.Templates.Remove(_emailDto);
        _dbContext.SaveChanges();
        await OnInitializedAsync();
    }
}
