@page "/"
@using BlazorServerSide.Models;
@using Blazored.TextEditor
@inject BlazorServerSide.Data.EmailDbContext _context
@inject BlazorServerSide.Models.EmailDto _messageObject
@inject IJSRuntime JSRuntime


<div class="split left">
    <div class="centered">
        <select @ref="myselect" class="form-control"
                @onchange="selectedValue">

            <option value="" disabled selected hidden>Please Select Error Message Type!</option>
            @foreach (var item in ComboBoxNew)
            {
                <option value="@item.Id">@item.TemplateName</option>
            }

        </select><br />

        <button class="btn btn-success"
                @onclick="SaveToDB">
            Save To Database
        </button>
        <button class="btn btn-danger"
                @onclick="DeleteFromDb">
            Delete From Database
        </button>
        <button class="btn btn-danger"
                @onclick="AddToDB">
            Add To Database
        </button><br />

        <BlazoredTextEditor @ref="@QuillHtml">
            <ToolbarContent>
                <select class="ql-header">
                    <option selected=""></option>
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option value="4"></option>
                    <option value="5"></option>
                </select>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>

            </ToolbarContent>
            <EditorContent>

            </EditorContent>
        </BlazoredTextEditor>
    </div>
</div>

<div class="split right">
    <div class="centered">
        @((MarkupString)HeadAndFooter.ErrorMessageHeadandFooter.ErrorMessageHeader)
        @((MarkupString)QuillHTMLContent)
        @QuillHTMLContent
        @((MarkupString)HeadAndFooter.ErrorMessageHeadandFooter.ErrorMessageFooter)
    </div>
</div>

@code {
    BlazoredTextEditor QuillHtml;
    BlazoredTextEditor QuillNative;
    BlazoredTextEditor QuillReadOnly;
    List<EmailDto> ComboBoxNew = new List<EmailDto>() { };
    private ElementReference myselect;
    string QuillHTMLContent;
    string ComboBoxId;
    string QuillContent;
    string QuillReadOnlyContent = 
        @"<span><b>Read Only</b> <u>Content</u></span>";
    bool mode = false;
    int templateId;

    public async void SaveToDB()
    {
        QuillHTMLContent = await this.QuillHtml.GetHTML();
        _messageObject = _context.Templates.FirstOrDefault(x => x.Id == templateId);
        _messageObject.TemplateContext = QuillHTMLContent.ToString();
        await _context.SaveChangesAsync();
        StateHasChanged();
    }

    public async void AddToDB()
    {
        QuillHTMLContent = await this.QuillHtml.GetHTML();
        _messageObject = _context.Templates.FirstOrDefault(x => x.Id == templateId);
        _messageObject.TemplateContext = QuillHTMLContent.ToString();
        _context.Templates.Update(_messageObject);
        ComboBoxNew.Add(_messageObject);
        await _context.SaveChangesAsync();
        StateHasChanged();
        //await OnInitializedAsync();
    }

    //public async void GetFromDB()
    //{
    //    _messageObject = _context.Templates.OrderByDescending(x => x.Id).FirstOrDefault();
    //    string QuillContent = $@"{_messageObject.TemplateContext}";
    //    await this.QuillHtml.LoadHTMLContent(QuillContent);
    //    StateHasChanged();
    //    await base.OnInitializedAsync();
    //}

    protected override async Task OnInitializedAsync()
    {
        ComboBoxNew = _context.Templates.ToList();
        await base.OnInitializedAsync();
    }

    public async void selectedValue(ChangeEventArgs args)
    {
        templateId = Convert.ToInt32(args.Value.ToString());
        _messageObject = _context.Templates.FirstOrDefault(x => x.Id == Convert.ToInt32(args.Value.ToString()));
        string QuillContent = $@"{_messageObject.TemplateContext}";
        await this.QuillHtml.LoadHTMLContent(QuillContent);
        StateHasChanged();
        //await OnInitializedAsync();
    }

    public async void DeleteFromDb()
    {
        _context.Templates.Remove(_messageObject);
        _context.SaveChanges();
        await OnInitializedAsync();
    }
}
